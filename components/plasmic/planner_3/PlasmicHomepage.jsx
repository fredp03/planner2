// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i4zHC9fkSk2pt4DoEJTVq6
// Component: Ob962zSjPJGd
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ToDo from "../../ToDo"; // plasmic-import: cxUeFhSOBp/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_planner_3.module.css"; // plasmic-import: i4zHC9fkSk2pt4DoEJTVq6/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: Ob962zSjPJGd/css

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
          onClick={async event => {
            const $steps = {};
            $steps["updateVariant"] = true
              ? (() => {
                  const actionArgs = {};
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "ggnh2Oy5Z",
                      componentUuid: "Ob962zSjPJGd"
                    },
                    () =>
                      (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }
                        undefined;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["updateVariant"] === "object" &&
              typeof $steps["updateVariant"].then === "function"
            ) {
              $steps["updateVariant"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariant",
                  interactionUuid: "ggnh2Oy5Z",
                  componentUuid: "Ob962zSjPJGd"
                },
                $steps["updateVariant"]
              );
            }
          }}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__rReCe)}>
              <div className={classNames(projectcss.all, sty.freeBox__g3Jb6)} />
              <div
                data-plasmic-name={"eventSliders"}
                data-plasmic-override={overrides.eventSliders}
                className={classNames(projectcss.all, sty.eventSliders)}
              >
                <ToDo
                  className={classNames("__wab_instance", sty.toDo__s6Uep)}
                />

                <ToDo
                  className={classNames("__wab_instance", sty.toDo___7Uqq7)}
                />

                <ToDo
                  className={classNames("__wab_instance", sty.toDo__iaNk1)}
                />

                <ToDo
                  className={classNames("__wab_instance", sty.toDo___2R1S)}
                />

                <ToDo
                  className={classNames("__wab_instance", sty.toDo__k5B4C)}
                />

                <ToDo
                  className={classNames("__wab_instance", sty.toDo___6NrT9)}
                />

                <ToDo
                  className={classNames("__wab_instance", sty.toDo__k3TJh)}
                />

                <ToDo
                  className={classNames("__wab_instance", sty.toDo__zn3O7)}
                />
              </div>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "eventSliders"],
  eventSliders: ["eventSliders"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    eventSliders: makeNodeComponent("eventSliders"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
