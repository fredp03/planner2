// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i4zHC9fkSk2pt4DoEJTVq6
// Component: cxUeFhSOBp
import * as React from "react";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_planner_3.module.css"; // plasmic-import: i4zHC9fkSk2pt4DoEJTVq6/projectcss
import sty from "./PlasmicToDo.module.css"; // plasmic-import: cxUeFhSOBp/css

export const PlasmicToDo__VariantProps = new Array("open");

export const PlasmicToDo__ArgProps = new Array("children", "slot");

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicToDo__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "open",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.open
      },
      {
        path: "state",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.open;
            } catch (e) {
              if (e instanceof TypeError) {
                return false;
              }
              throw e;
            }
          })()
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootopen]: hasVariant($state, "open", "open") }
      )}
      onClick={async event => {
        const $steps = {};
        $steps["updateOpen"] = true
          ? (() => {
              const actionArgs = {
                vgroup: __wrapUserFunction(
                  {
                    type: "InteractionArgLoc",
                    actionName: "updateVariant",
                    interactionUuid: "cMGgBukB7",
                    componentUuid: "cxUeFhSOBp",
                    argName: "vgroup"
                  },
                  () => "open"
                ),
                operation: __wrapUserFunction(
                  {
                    type: "InteractionArgLoc",
                    actionName: "updateVariant",
                    interactionUuid: "cMGgBukB7",
                    componentUuid: "cxUeFhSOBp",
                    argName: "operation"
                  },
                  () => 2
                ),
                value: __wrapUserFunction(
                  {
                    type: "InteractionArgLoc",
                    actionName: "updateVariant",
                    interactionUuid: "cMGgBukB7",
                    componentUuid: "cxUeFhSOBp",
                    argName: "value"
                  },
                  () => "open"
                )
              };
              return __wrapUserFunction(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariant",
                  interactionUuid: "cMGgBukB7",
                  componentUuid: "cxUeFhSOBp"
                },
                () =>
                  (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }
                    const oldValue = p.get($state, vgroup);
                    p.set($state, vgroup, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]),
                actionArgs
              );
            })()
          : undefined;
        if (
          typeof $steps["updateOpen"] === "object" &&
          typeof $steps["updateOpen"].then === "function"
        ) {
          $steps["updateOpen"] = await __wrapUserPromise(
            {
              type: "InteractionLoc",
              actionName: "updateVariant",
              interactionUuid: "cMGgBukB7",
              componentUuid: "cxUeFhSOBp"
            },
            $steps["updateOpen"]
          );
        }
      }}
    >
      {(hasVariant($state, "open", "open") ? true : false) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__tEnjr, {
            [sty.freeBoxopen__tEnjRiwwey]: hasVariant($state, "open", "open")
          })}
          onClick={async event => {
            const $steps = {};
            $steps["updateOpen"] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "9aIRTXAvG",
                        componentUuid: "cxUeFhSOBp",
                        argName: "vgroup"
                      },
                      () => "open"
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "9aIRTXAvG",
                        componentUuid: "cxUeFhSOBp",
                        argName: "operation"
                      },
                      () => 2
                    ),
                    value: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariant",
                        interactionUuid: "9aIRTXAvG",
                        componentUuid: "cxUeFhSOBp",
                        argName: "value"
                      },
                      () => "open"
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "9aIRTXAvG",
                      componentUuid: "cxUeFhSOBp"
                    },
                    () =>
                      (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }
                        const oldValue = p.get($state, vgroup);
                        p.set($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["updateOpen"] === "object" &&
              typeof $steps["updateOpen"].then === "function"
            ) {
              $steps["updateOpen"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariant",
                  interactionUuid: "9aIRTXAvG",
                  componentUuid: "cxUeFhSOBp"
                },
                $steps["updateOpen"]
              );
            }
          }}
        >
          {(hasVariant($state, "open", "open") ? true : true) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oErW7,
                {
                  [sty.textopen__oErW7Iwwey]: hasVariant($state, "open", "open")
                }
              )}
            >
              {"New To-Do"}
            </div>
          ) : null}
          {(hasVariant($state, "open", "open") ? true : true) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0Zb1V,
                {
                  [sty.textopen___0Zb1Viwwey]: hasVariant(
                    $state,
                    "open",
                    "open"
                  )
                }
              )}
            >
              {"Description\n"}
            </div>
          ) : null}
        </div>
      ) : null}
      <div
        className={classNames(projectcss.all, sty.freeBox___31IZz, {
          [sty.freeBoxopen___31IZziwwey]: hasVariant($state, "open", "open")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "New To-Do",
          value: args.slot,
          className: classNames(sty.slotTargetSlot, {
            [sty.slotTargetSlotopen]: hasVariant($state, "open", "open")
          })
        })}
      </div>
      {(hasVariant($state, "open", "open") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__m5Cnm, {
            [sty.freeBoxopen__m5CnMiwwey]: hasVariant($state, "open", "open")
          })}
          onClick={async event => {
            const $steps = {};
            $steps["updateState"] = true
              ? (() => {
                  const actionArgs = {
                    variable: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "sCtHiUa2Q",
                        componentUuid: "cxUeFhSOBp",
                        argName: "variable"
                      },
                      () => ({
                        objRoot: $state,
                        variablePath: ["state"]
                      })
                    ),
                    operation: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "updateVariable",
                        interactionUuid: "sCtHiUa2Q",
                        componentUuid: "cxUeFhSOBp",
                        argName: "operation"
                      },
                      () => 0
                    )
                  };
                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "sCtHiUa2Q",
                      componentUuid: "cxUeFhSOBp"
                    },
                    () =>
                      (({ variable, value, startIndex, deleteCount }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        p.set(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["updateState"] === "object" &&
              typeof $steps["updateState"].then === "function"
            ) {
              $steps["updateState"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariable",
                  interactionUuid: "sCtHiUa2Q",
                  componentUuid: "cxUeFhSOBp"
                },
                $steps["updateState"]
              );
            }
          }}
        >
          {false
            ? p.renderPlasmicSlot({
                defaultContents: "Description\n",
                value: args.children,
                className: classNames(sty.slotTargetChildren, {
                  [sty.slotTargetChildrenopen]: hasVariant(
                    $state,
                    "open",
                    "open"
                  )
                })
              })
            : null}
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicToDo__ArgProps,
          internalVariantPropNames: PlasmicToDo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicToDo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicToDo";
  } else {
    func.displayName = `PlasmicToDo.${nodeName}`;
  }
  return func;
}

export const PlasmicToDo = Object.assign(
  // Top-level PlasmicToDo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicToDo
    internalVariantProps: PlasmicToDo__VariantProps,
    internalArgProps: PlasmicToDo__ArgProps
  }
);

export default PlasmicToDo;
/* prettier-ignore-end */
